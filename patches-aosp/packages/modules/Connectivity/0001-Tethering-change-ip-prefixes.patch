From 16fb57588c1642ce55d9a9c28c72ac5a88727c9c Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Micha=C5=82=20Gapin=CC=81ski?= <mike@gapinski.eu>
Date: Mon, 17 Oct 2022 02:00:02 +0200
Subject: [PATCH] Tethering: change ip prefixes
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Change-Id: I4946469ee5fa230848b5e16ebe42cfbd31e086bc
Signed-off-by: Michał Gapiński <mike@gapinski.eu>
---
 .../tethering/PrivateAddressCoordinator.java          | 11 +++++------
 1 file changed, 5 insertions(+), 6 deletions(-)

diff --git a/Tethering/src/com/android/networkstack/tethering/PrivateAddressCoordinator.java b/Tethering/src/com/android/networkstack/tethering/PrivateAddressCoordinator.java
index 528991f..e5db3a6 100644
--- a/Tethering/src/com/android/networkstack/tethering/PrivateAddressCoordinator.java
+++ b/Tethering/src/com/android/networkstack/tethering/PrivateAddressCoordinator.java
@@ -72,8 +72,8 @@ public class PrivateAddressCoordinator {
     // mUpstreamPrefixMap when tethering is starting. See #maybeRemoveDeprecatedUpstreams().
     private final ArrayMap<Network, List<IpPrefix>> mUpstreamPrefixMap;
     private final ArraySet<IpServer> mDownstreams;
-    private static final String LEGACY_WIFI_P2P_IFACE_ADDRESS = "192.168.49.1/24";
-    private static final String LEGACY_BLUETOOTH_IFACE_ADDRESS = "192.168.44.1/24";
+    private static final String LEGACY_WIFI_P2P_IFACE_ADDRESS = "172.16.49.1/24";
+    private static final String LEGACY_BLUETOOTH_IFACE_ADDRESS = "172.16.44.1/24";
     private final List<IpPrefix> mTetheringPrefixes;
     private final ConnectivityManager mConnectivityMgr;
     private final TetheringConfiguration mConfig;
@@ -94,8 +94,7 @@ public class PrivateAddressCoordinator {
         mCachedAddresses.put(new AddressKey(TETHERING_WIFI_P2P, CONNECTIVITY_SCOPE_LOCAL),
                 new LinkAddress(LEGACY_WIFI_P2P_IFACE_ADDRESS));
 
-        mTetheringPrefixes = new ArrayList<>(Arrays.asList(new IpPrefix("192.168.0.0/16"),
-            new IpPrefix("172.16.0.0/12"), new IpPrefix("10.0.0.0/8")));
+        mTetheringPrefixes = new ArrayList<>(Arrays.asList(new IpPrefix("172.16.0.0/24")));
         mRandom = new Random();
     }
 
@@ -291,12 +290,12 @@ public class PrivateAddressCoordinator {
         //
         // Additionally, it makes debug output easier to read by making the numbers smaller.
         final int randomInt = getRandomInt();
-        final int randomPrefixStart = randomInt & ~prefixRangeMask & prefixMask;
+        final int randomPrefixStart = 1;
 
         // A random offset within the prefix. Used to determine the local address once the prefix
         // is selected. It does not result in an IPv4 address ending in .0, .1, or .255
         // For a PREFIX_LENGTH of 24, this is a number between 2 and 254.
-        final int subAddress = getSanitizedSubAddr(randomInt, ~prefixMask);
+        final int subAddress = 1;
 
         // Find a prefix length PREFIX_LENGTH between randomPrefixStart and the end of the block,
         // such that the prefix does not conflict with any upstream.
-- 
2.34.1


From b781f5ba8be4a196956565a6e02dd94aa75a3d25 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Micha=C5=82=20Gapi=C5=84ski?= <mike@gapinski.eu>
Date: Wed, 14 Jun 2023 15:09:25 +0000
Subject: [PATCH 1/1] drm_hwcomposer: Allow overriding headless resolution in
 runtime

Change-Id: I020a2ac55624d563afe83260714c06058512f368
---
 Android.bp                        |  1 +
 hwc2_device/DrmHwcTwo.h           |  4 ++--
 hwc2_device/HwcDisplay.cpp        | 25 +++++++++++++++++++++--
 hwc2_device/HwcDisplay.h          |  4 +++-
 hwc2_device/HwcDisplayConfigs.cpp | 33 ++++++++++++++++++++++++-------
 meson.build                       |  1 +
 utils/properties.h                |  1 +
 7 files changed, 57 insertions(+), 12 deletions(-)

diff --git a/Android.bp b/Android.bp
index 0e313ea..6aea28e 100644
--- a/Android.bp
+++ b/Android.bp
@@ -25,6 +25,7 @@ cc_defaults {
     name: "hwcomposer.drm_defaults",
 
     shared_libs: [
+        "libbase",
         "libcutils",
         "libdrm",
         "libhardware",
diff --git a/hwc2_device/DrmHwcTwo.h b/hwc2_device/DrmHwcTwo.h
index 81c5155..70ff2e2 100644
--- a/hwc2_device/DrmHwcTwo.h
+++ b/hwc2_device/DrmHwcTwo.h
@@ -60,6 +60,8 @@ class DrmHwcTwo : public PipelineToFrontendBindingInterface {
     deferred_hotplug_events_[displayid] = connected;
   }
 
+  void SendHotplugEventToClient(hwc2_display_t displayid, bool connected) const;
+
   // PipelineToFrontendBindingInterface
   bool BindDisplay(DrmDisplayPipeline *pipeline) override;
   bool UnbindDisplay(DrmDisplayPipeline *pipeline) override;
@@ -71,8 +73,6 @@ class DrmHwcTwo : public PipelineToFrontendBindingInterface {
                                                  int64_t timestamp) const;
 
  private:
-  void SendHotplugEventToClient(hwc2_display_t displayid, bool connected) const;
-
   ResourceManager resource_manager_;
   std::map<hwc2_display_t, std::unique_ptr<HwcDisplay>> displays_;
   std::map<DrmDisplayPipeline *, hwc2_display_t> display_handles_;
diff --git a/hwc2_device/HwcDisplay.cpp b/hwc2_device/HwcDisplay.cpp
index efd8c14..a16c787 100644
--- a/hwc2_device/HwcDisplay.cpp
+++ b/hwc2_device/HwcDisplay.cpp
@@ -135,7 +135,8 @@ void HwcDisplay::Deinit() {
 }
 
 HWC2::Error HwcDisplay::Init() {
-  ChosePreferredConfig();
+  MonitorHeadlessConfigLatch();
+  ChoosePreferredConfig();
 
   auto vsw_callbacks = (VSyncWorkerCallbacks){
       .out_event =
@@ -188,11 +189,31 @@ HWC2::Error HwcDisplay::Init() {
   return HWC2::Error::None;
 }
 
-HWC2::Error HwcDisplay::ChosePreferredConfig() {
+void HwcDisplay::MonitorHeadlessConfigLatch() {
+	std::thread([this] {
+        while (true) {
+            if (base::WaitForProperty("persist.drm_hwc.latch",
+                                                "1",
+                                                std::chrono::seconds(10))) {
+		if(IsInHeadlessMode()) {
+                   ALOGD("headless config override latch triggered");
+		   configs_.FillHeadless();
+                   staged_mode_config_id_ = configs_.preferred_config_id;
+		   hwc2_->SendHotplugEventToClient(handle_, /*connected = */ true);
+		}
+                base::SetProperty("persist.drm_hwc.latch", "0");
+            }
+        }
+    }).detach();
+}
+
+HWC2::Error HwcDisplay::ChoosePreferredConfig() {
   HWC2::Error err{};
   if (!IsInHeadlessMode()) {
+    base::SetProperty("persist.drm_hwc.headless.is_enabled", "0");
     err = configs_.Update(*pipeline_->connector->Get());
   } else {
+    base::SetProperty("persist.drm_hwc.headless.is_enabled", "1");
     configs_.FillHeadless();
   }
   if (!IsInHeadlessMode() && err != HWC2::Error::None) {
diff --git a/hwc2_device/HwcDisplay.h b/hwc2_device/HwcDisplay.h
index bf95c3e..f753924 100644
--- a/hwc2_device/HwcDisplay.h
+++ b/hwc2_device/HwcDisplay.h
@@ -50,6 +50,8 @@ class HwcDisplay {
   std::vector<HwcLayer *> GetOrderLayersByZPos();
 
   void ClearDisplay();
+  
+  void MonitorHeadlessConfigLatch();
 
   std::string Dump();
 
@@ -110,7 +112,7 @@ class HwcDisplay {
                                int32_t *fences);
   HWC2::Error PresentDisplay(int32_t *out_present_fence);
   HWC2::Error SetActiveConfig(hwc2_config_t config);
-  HWC2::Error ChosePreferredConfig();
+  HWC2::Error ChoosePreferredConfig();
   HWC2::Error SetClientTarget(buffer_handle_t target, int32_t acquire_fence,
                               int32_t dataspace, hwc_region_t damage);
   HWC2::Error SetColorMode(int32_t mode);
diff --git a/hwc2_device/HwcDisplayConfigs.cpp b/hwc2_device/HwcDisplayConfigs.cpp
index 9727989..1836870 100644
--- a/hwc2_device/HwcDisplayConfigs.cpp
+++ b/hwc2_device/HwcDisplayConfigs.cpp
@@ -19,16 +19,17 @@
 #include "HwcDisplayConfigs.h"
 
 #include <cmath>
+#include <sstream>
 
 #include "drm/DrmConnector.h"
 #include "utils/log.h"
+#include "utils/properties.h"
 
 constexpr uint32_t kHeadlessModeDisplayWidthMm = 163;
 constexpr uint32_t kHeadlessModeDisplayHeightMm = 122;
-constexpr uint32_t kHeadlessModeDisplayWidthPx = 1024;
-constexpr uint32_t kHeadlessModeDisplayHeightPx = 768;
-constexpr uint32_t kHeadlessModeDisplayVRefresh = 60;
-
+constexpr uint16_t kHeadlessModeDisplayWidthPx = 1024;
+constexpr uint16_t kHeadlessModeDisplayHeightPx = 768;
+constexpr uint16_t kHeadlessModeDisplayVRefresh = 60;
 namespace android {
 
 // NOLINTNEXTLINE(cppcoreguidelines-avoid-non-const-global-variables)
@@ -39,10 +40,28 @@ void HwcDisplayConfigs::FillHeadless() {
 
   last_config_id++;
   preferred_config_id = active_config_id = last_config_id;
+
+
+  const std::string configuration = base::GetProperty("persist.drm_hwc.headless.config", "");
+  
+  uint16_t width_px = 0;
+  uint16_t height_px = 0;
+  uint16_t v_refresh = 0;
+      
+  std::stringstream ss(configuration);
+  char delim = 'x';
+if(!((ss >> width_px && ss >> delim && delim == 'x') &&
+    (ss >> height_px && ss >> delim && delim == '@') &&
+    (ss >> v_refresh))) {
+    width_px = kHeadlessModeDisplayWidthPx;
+    height_px = kHeadlessModeDisplayHeightPx;
+    v_refresh = kHeadlessModeDisplayVRefresh;
+}
+  
   auto headless_drm_mode_info = (drmModeModeInfo){
-      .hdisplay = kHeadlessModeDisplayWidthPx,
-      .vdisplay = kHeadlessModeDisplayHeightPx,
-      .vrefresh = kHeadlessModeDisplayVRefresh,
+      .hdisplay = width_px,
+      .vdisplay = height_px,
+      .vrefresh = v_refresh,
       .name = "HEADLESS-MODE",
   };
   hwc_configs[active_config_id] = (HwcDisplayConfig){
diff --git a/meson.build b/meson.build
index c2e5fb6..fa42c9b 100644
--- a/meson.build
+++ b/meson.build
@@ -19,6 +19,7 @@ src_common = files(
 )
 
 deps = [
+    dependency('base'),
     dependency('cutils'),
     dependency('drm'),
     dependency('hardware'),
diff --git a/utils/properties.h b/utils/properties.h
index e400236..9bd4b2f 100644
--- a/utils/properties.h
+++ b/utils/properties.h
@@ -19,6 +19,7 @@
 #ifdef ANDROID
 
 #include <cutils/properties.h>
+#include <android-base/properties.h>
 
 #else
 
-- 
2.34.1


From 4a009f7167829b49fd6df6f75e1de8f2947788ae Mon Sep 17 00:00:00 2001
From: Chih-Wei Huang <cwhuang@linux.org.tw>
Date: Wed, 19 Sep 2018 22:57:32 +0800
Subject: [PATCH] drm_hwcomposer: allow to force mode by a property
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

The desired resolution could be set by property debug.drm.mode.force.
The other modes are ignored.

Change-Id: Iefc2feb68bed75b8b4fecd442c106aabc54b0d7a
Signed-off-by: Michał Gapiński <mike@gapinski.eu>
---
 drm/DrmConnector.cpp | 32 +++++++++++++++++++++++++++++++-
 1 file changed, 31 insertions(+), 1 deletion(-)

diff --git a/drm/DrmConnector.cpp b/drm/DrmConnector.cpp
index f625563..25d401c 100644
--- a/drm/DrmConnector.cpp
+++ b/drm/DrmConnector.cpp
@@ -28,6 +28,8 @@
 #include "DrmDevice.h"
 #include "utils/log.h"
 
+#include <cutils/properties.h>
+
 #ifndef DRM_MODE_CONNECTOR_SPI
 // NOLINTNEXTLINE(cppcoreguidelines-macro-usage)
 #define DRM_MODE_CONNECTOR_SPI 19
@@ -158,6 +160,20 @@ std::string DrmConnector::GetName() const {
 }
 
 int DrmConnector::UpdateModes() {
+  char value[PROPERTY_VALUE_MAX];
+  uint32_t xres = 0, yres = 0, rate = 0;
+  if (property_get("debug.drm.mode.force", value, NULL)) {
+    // parse <xres>x<yres>[@<refreshrate>]
+    if (sscanf(value, "%dx%d@%d", &xres, &yres, &rate) != 3) {
+      rate = 0;
+      if (sscanf(value, "%dx%d", &xres, &yres) != 2) {
+        xres = yres = 0;
+      }
+    }
+    ALOGI_IF(xres && yres, "force mode %dx%d@%dHz for display in connector %s",
+             xres, yres, rate, GetName().c_str());
+  }
+
   auto conn = MakeDrmModeConnectorUnique(*drm_->GetFd(), GetId());
   if (!conn) {
     ALOGE("Failed to get connector %d", GetId());
@@ -176,7 +192,21 @@ int DrmConnector::UpdateModes() {
     }
 
     if (!exists) {
-      modes_.emplace_back(&connector_->modes[i]);
+      DrmMode m(&connector_->modes[i]);
+      ALOGD("supported mode %dx%d@%f for display in connector %s",
+            m.GetRawMode().hdisplay, m.GetRawMode().vdisplay, m.GetVRefresh(), GetName().c_str());
+      if (xres && yres) {
+        if (!rate && m.GetRawMode().hdisplay == xres && m.GetRawMode().vdisplay == yres) {
+          rate = uint32_t(m.GetVRefresh());
+        }
+        if (m.GetRawMode().hdisplay != xres || m.GetRawMode().vdisplay != yres ||
+              uint32_t(m.GetVRefresh()) != rate) {
+          continue;
+        }
+      }
+      modes_.emplace_back(m);
+      ALOGD("add new mode %dx%d@%.0f for display in connector %s",
+            m.GetRawMode().hdisplay, m.GetRawMode().vdisplay, m.GetVRefresh(), GetName().c_str());
     }
   }
 
-- 
2.34.1
